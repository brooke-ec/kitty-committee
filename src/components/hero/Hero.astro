---
import { getRandomBanner } from "./banners";
const banner = await getRandomBanner();
---

<div class="hero">
	<div id="scene">
		<div class="banner" data-depth="0.2" style=`background-image: url(${banner.src});`></div>
		<div class="tsparticles" data-depth="0.3"></div>
		<div class="tsparticles" data-depth="0.4"></div>
		<div class="content" data-depth="0"><div class="slot"><slot /></div></div>
	</div>
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" preserveAspectRatio="none">
		<path
			fill="#222222"
			fill-opacity="1"
			d="M0,288L48,272C96,256,192,224,288,197.3C384,171,480,149,576,165.3C672,181,768,235,864,250.7C960,267,1056,245,1152,250.7C1248,256,1344,288,1392,304L1440,320L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
		></path>
	</svg>
</div>

<script>
	import { tsParticles } from "@tsparticles/engine";
	import { loadFull } from "tsparticles";
	import options from "./particles.ts";

	const scene = document.getElementById("scene")!;

	let pointer: { x: number; y: number } = { x: window.innerWidth / 2, y: window.innerHeight / 2 };
	let target: { x: number; y: number } = pointer;

	function update() {
		requestAnimationFrame(update);

		pointer = {
			x: pointer.x + (target.x - pointer.x) * 0.1,
			y: pointer.y + (target.y - pointer.y) * 0.1,
		};

		let offset = 0;
		for (const node of scene.childNodes) {
			if (node instanceof HTMLElement && node.hasAttribute("data-depth")) {
				const depth = parseFloat(node.getAttribute("data-depth")!) * 0.25;
				node.style.transform = `translate(${(window.scrollX * 4 - pointer.x) * depth}px, ${(window.scrollY * 4 - pointer.y) * depth - offset}px)`;
				node.style.height = `calc(100% + ${depth * 100}vh)`;
				node.style.width = `calc(100% + ${depth * 100}vw)`;
				offset += node.clientHeight;
			}
		}
	}

	requestAnimationFrame(update);
	window.addEventListener("pointermove", (e) => {
		target = {
			x: (e.clientX / window.innerWidth) * window.innerWidth,
			y: (e.clientY / window.innerHeight) * window.innerHeight,
		};
	});

	update();
	loadFull(tsParticles);
	for (const element of document.getElementsByClassName("tsparticles") as HTMLCollectionOf<HTMLElement>)
		tsParticles.load({ id: crypto.randomUUID(), element, options });
</script>

<style lang="scss">
	.hero {
		overflow: hidden;
		height: 580px;
	}

	#scene {
		height: 100%;

		& > div {
			height: 100%;
			width: 100%;
		}
	}

	.banner {
		background-position: 50% 70%;
		background-size: cover;
	}

	.content {
		display: flex;
		align-items: center;
		padding-bottom: 40px;

		.slot {
			border-radius: 0 5px 5px 0;
			background-color: #222222;
			padding: 10px 20px 10px var(--page-margin);
		}
	}

	svg {
		position: absolute;
		margin-top: -80px;
		height: 80px;
		width: 100%;
	}
</style>
